Code Grep and Vi Grepped
cg, vg - tools for finding and modifying on keywords
Joshua Uziel <juziel@home.com> - October 1, 1999 - version 1.5.2

All too often I need to dig through source code.  Where something
is defined, used, what files, etc.  There's a great tool for doing
this from AT&T called "cscope" and a very alpha free clone of it
called "cs" (that doesn't look like it's being actively worked
on) that does this.  There are some alternatives... like ctags
and etags for instance... but these only take you to where something
is defined... not wherever it is used, which makes it frustrating
when, for example, you're at the definition of a function and
instead want to see who and what use that function.

So, as a quick hack, mostly for myself, I started writing up some 
perl scripts (I consciously chose perl, but considered other 
languages first).  One script, "cg", does the equivalent of a find
and grep, storing matches and then displaying it in a human-friendly
manner.  Run it like so:

[11:14pm] tux:/usr/src/linux/fs> cg ext2_permission
0 ext2/acl.c   22 * ext2_permission ()
1 ext2/acl.c   26 int ext2_permission (struct inode * inode, int mask)
2 ext2/dir.c   74 ext2_permission,        /* permission */
3 ext2/file.c 102 ext2_permission,        /* permission */

So, you see in the first column, we have a count, the second column
is the filename, the third column is the line number, and after that
is what it found on that line.  This gets stored in your home directory
as ~/.cglast, so that if you want to see it again, all you have to
do is type "cg" to view it again.  Also stored in the first line is
the pwd of where your inquiry was run from, so you that won't have
to be there to do the second half of this kit.

There are several ways of running "cg".  Again, "cg" alone recalls the
last search.  You can also run it like "cg pattern", and it'll search
recursively for all default patterns.  To that, you can add arguments
like "-i" for case insensitive like "cg -i pattern".  If you don't want
to use the default searching, you can specify where to search and run
like grep(1).  For example, running "cg pattern '*.c'" will check all .c
files recursively.  If you want to search all files, you can use "cg
pattern '*'".  Note that the quotes (single or double, it doesn't
matter) are recommended because otherwise the shell expands it before it
gets to perl, so the search would not be recursive.  It of course works
like this as well.  This script also supports coloring and bolding options
which are both hardcoded and customizable per-user with a ~/.cgvgrc file.

The other script is called "vg" and opens an editor on what has been 
grepped (most editors work).  So remember that count?  All you
have to do is run "vg count" and it'll fire off a editor in that file
and at that line number.  So, in our example, running "vg 1" would
open up an editing session on fs/ext2/acl.c at line 26.

It is the storing of the query in ~/.cglast that allows cg and vg
to work together.  Also, the reason for the ability to see the
results of the previous query is there because we can, and because
quite often you may want to revisit the last query, so why do an
expensive grep operation again?

Now true that these scripts are very much hacks, but they at least
provide me with the functionality that I was looking for in a very
smal amount of time.  They're not as feature-rich or precise as
cscope is, but at the same time are simple to use and are not
language-specific (cscope only knows C and not C++, java or perl
for example).

Used with something like ctags, this can hopefully save you a lot
of time.  Feel free to send me comments or suggestions...

----------------
REVISION HISTORY
----------------
October 1, 1999
1.5.2 - Just a small bugfix release.  First, I removed a debug statement
	that I forgot to take out before sending off the last version
	(oops).  The bigger change is that now it'll parse through
	directories that are given as arguments... so if you do a
	"cg 'pattern' dir1 dir2", it'll recursively search through
	those directories.

August 25, 1999
1.5.1 - Fixed a bug where if one and only one file was specified
	to search through and it was an existing text file that it
	would read that file rather than blindly assume it's a
	search expression and do a huge recursive search.

	Cleaned up the finding code a bit.  Now both the default
	search and a user-specified search use the same &wanted
	subroutine, with the search list being specified by a
	$SEARCH variable.  Along with this, the default search list
	is user-defineable in the .cgvgrc file as well.

August 18, 1999
1.5 -	The big change of this version is that now the searching is
	handled by Perl rather than by grep(1), egrep(1) and fgrep(1).
	This required quite a bit of change, but everything is working
	like it was before.  The only really desirable option beyond
	the '-n' option (which I've covered) was '-i', which is
	covered as the only option at the moment.  The only things
	that are not handled by Perl now and are hard-coded now are
	"stty" and "which", and when I find a clean way of implementing
	them without requiring a trip to CPAN, I'll add those as well.

	Bugs have been fixed with handling the configuration file,
	and with the user-specified search list.  Now a user can
	search (for example) all C files with "cg pattern *.c" or
	"cg pattern '*.c'"... with the former being expanded by the
	shell and the latter being pattern matched by Perl.  Also
	note that the latter is a recursive search whereas the former
	is only those files specified on the command-line.  Colors
	are also now configurable by the configuration file.

	Manpages and a Makefile have also been added for user convenience.

August 15, 1999
1.4 -	Updates made here fix a bug that not all of the search list
	was being utilized, and the biggest change being that cg
	now uses Perl's internal File::Find routine instead of an
	external /bin/find (or whatever) to get the list of files.

	Syntax has changed a bit because of this... when files to
	search are specified, it must be done in quotes (single or
	double) like "cg pattern '*'" to search all files.

	Also, there's now a ~/.cgvgrc file where users can specify
	their editor, and bold and coloring options so that not all
	system users have to use the default.  See the "cgvgrc_example"
	file for a sample with the defaults.  Currently only $EDITOR,
	$BOLD, $BOLD_ALTERNATE and $COLORS can be set.  A bug in
	version 1.3 was corrected with the $BOLD option as well.

July 7, 1999
1.3 -	Same as the last version, except now colors are supported
	in cg.  There are the options $BOLD, $BOLD_ALTERNATE and  
	$COLOR to be set to 1 (on) or 0 (off) if you do or don't 
	want these feature.  $COLOR is needed for the $BOLD
	options, and really you should select only one or neither
	of the two $BOLD options.  Colors only work when displaying
	straight to STDOUT.

	In vg, I've gotten rid of the $CGEDITOR variable and replaced
	it with the standard $EDITOR environment variable since I've
	found most editors to support the +number option.  Also fixed
	a bug to give a clear error when the editor doesn't exist.

June 30, 1999
1.2 -	More changes to the cg script.  Rather than simply print the
	logfile like previous versions, I actually attempt to make
	it human readable now.  The logfile keeps the same format,
	just what's printed to the screen has changed.  In doing this,
	though, there are a gotcha or two to watch for in how much
	of the string can be printed.  Also, I've made an attempt to
	have the program auto-detect the number of columns using
	"stty -a" rather than assuming 80 columns.  Switched to
	using "fgrep" instead of regular "grep", as it seemed more
	appropriate for this task.  Did some code cleanup in both
	cg and vg otherwise.  An environment variable, $CGEDITOR
	can be set for choosing an editor to use now.

	With this version, I'm close to probably as far as this
	may go (with the exceptions of patches and improvements).
	Future versions of this program will possibly just focus
	on cleanups from the current state.  Realistically, the
	next step is to make a real cscope clone.  It's often in
	the back of my mind, so feel free to contact me if you
	would like to discuss this possibility.

June 28, 1999
1.1 - 	Changed how the cg program works a bit.  Instead of having the
	user define the files to search in (*, *.c, *.java, etc.), it
	now has a list of files built-in.  This should decrease the
	overhead quite a bit (in not searching all files), allow for
	all versions of grep (instead of just GNU grep v2.3 and later),
	and cut an argument... none of the flexibility is lost, and
	it's actually advisable to avoid the mode where you specify
	the files to search for as a huge overhead reduction in the
	program's runtime.  The use of arguments for find(1) chosen 
	are also done so that non-GNU versions of it can be used, and 
	I use Perl to do some cleanup.

	The vg script has also been modified to support both "vim"
	and regular "vi".  Before, I was executing "vim path/file +line",
	and instead now am running "vi +line path/file", which is
	how both traditional vi's and vim can handle it.  All in all,
	these scripts will work fine on both the Linux and Solaris
	machines I have tested on (both GNU and non-GNU tools).

	Renamed "rg" to "cg", as the name seemed more appropriate.

June 8, 1999
1.0 -	Initial release.  Requires GNU grep v2.3 or later, and is a
	bit of a dog to run... but hey, it does what it's supposed to
	do, so I'm happy for now.  Scripts are "rg" and "vg".
